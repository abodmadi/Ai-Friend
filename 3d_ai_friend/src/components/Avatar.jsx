/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
https://models.readyplayer.me/6617cbe2ae4a3d682a4368e5.glb?morphTargets=Oculus%20Visemes
*/

import React, { useEffect, useRef, useState } from 'react'
import { useAnimations ,useFBX, useGLTF } from '@react-three/drei'
import { useFrame, useLoader } from '@react-three/fiber';
import * as THREE from "three";
import { useSelector } from 'react-redux';

export default function Model(props) {

  const {currentRequest} = useSelector((state)=>state.request)
  /* Animations code start */
    // load animations
    const {animations:idleAnimation} = useFBX('/animations/Neutral Idle.fbx')
    const {animations:waveHipHopAnimation} = useFBX('/animations/Wave Hip Hop Dance.fbx')
    const {animations:thinkingAnimation} = useFBX('/animations/Thinking.fbx')
    // Rename it 
    idleAnimation[0].name='Neutral Idle'
    waveHipHopAnimation[0].name='Wave Hip Hop Dance'
    thinkingAnimation[0].name='Thinking'
    
    // Animation status 
    const [animation,setAnimation] = useState('Neutral Idle')
    
    // ref avatar 
    const group = useRef()

    //use animations 
    const {actions} = useAnimations([idleAnimation[0],waveHipHopAnimation[0]],group)

    useEffect(()=>{
      actions[animation].reset().fadeIn(0.5).play()
      //return actions[animation].reset().fadeOut()
    },[animation])
  /* Animations code end */


  /* Lep sync start */
  // corresponding lipSync character
  const corresponding = {
    A: "viseme_PP",
    B: "viseme_kk",
    C: "viseme_I",
    D: "viseme_AA",
    E: "viseme_O",
    F: "viseme_U",
    G: "viseme_FF",
    H: "viseme_TH",
    X: "viseme_PP",
  };

  
  const audio = !currentRequest ? new Audio(`/assets/sounds/welcome.mp3`) : new Audio("data:audio/mp3;base64," + currentRequest.lepSyncSound)
  const lipSync = !currentRequest ? JSON.parse(useLoader(THREE.FileLoader,`/assets/jsons/welcome.json`)) : currentRequest.lepSyncJson
  
  // LipSync useFrame
  useFrame(()=>{
    if (audio.paused || audio.ended) {
      setAnimation("Neutral Idle");
      return;
    }
    const currentAudioTime = audio.currentTime
    Object.values(corresponding).forEach((value) => {
      nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[value]]=0
      nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[value]]=0
    });

    for (let i = 0; i < lipSync.mouthCues.length; i++) {
      const mouthCue = lipSync.mouthCues[i];
      if (
        currentAudioTime >= mouthCue.start &&
        currentAudioTime <= mouthCue.end
      ) {
        nodes.Wolf3D_Head.morphTargetInfluences[nodes.Wolf3D_Head.morphTargetDictionary[corresponding[mouthCue.value]]]=1
        nodes.Wolf3D_Teeth.morphTargetInfluences[nodes.Wolf3D_Teeth.morphTargetDictionary[corresponding[mouthCue.value]]]=1
      }
    }

  })

 // useEffect
  useEffect(()=>{
    audio.play();
  },[currentRequest]) 

  /* Lep sync end */

  const { nodes, materials } = useGLTF('/model/Avatar.glb')
  return (
    <group {...props} dispose={null} scale={2.58} position={[0.199,-2.55,0]} ref={group}>
      <primitive object={nodes.Hips} />
      <skinnedMesh
        name="EyeLeft"
        geometry={nodes.EyeLeft.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeLeft.skeleton}
        morphTargetDictionary={nodes.EyeLeft.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeLeft.morphTargetInfluences}
      />
      <skinnedMesh
        name="EyeRight"
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
        skeleton={nodes.EyeRight.skeleton}
        morphTargetDictionary={nodes.EyeRight.morphTargetDictionary}
        morphTargetInfluences={nodes.EyeRight.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Head"
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
        skeleton={nodes.Wolf3D_Head.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Head.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Head.morphTargetInfluences}
      />
      <skinnedMesh
        name="Wolf3D_Teeth"
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
        skeleton={nodes.Wolf3D_Teeth.skeleton}
        morphTargetDictionary={nodes.Wolf3D_Teeth.morphTargetDictionary}
        morphTargetInfluences={nodes.Wolf3D_Teeth.morphTargetInfluences}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
        skeleton={nodes.Wolf3D_Hair.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
        skeleton={nodes.Wolf3D_Body.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
        skeleton={nodes.Wolf3D_Outfit_Bottom.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
        skeleton={nodes.Wolf3D_Outfit_Footwear.skeleton}
      />
      <skinnedMesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
        skeleton={nodes.Wolf3D_Outfit_Top.skeleton}
      />
    </group>
  )
}

useGLTF.preload('/model/Avatar.glb')
